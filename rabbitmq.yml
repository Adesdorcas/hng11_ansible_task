---
- name: Installing rabbitMQ and Nginx services
  hosts: test
  gather_facts: yes
  become: yes
  vars:
    rabbitmq_version: "3.8"
    hng_user: "hng"
    app_port: 3000
    app_host: "127.0.0.1"
    smtp_host: "smtp.gmail.com"  # Set your SMTP host here
    smtp_port: "587"
    smtp_user: "adesdorcas@gmail.com"
    smtp_password: "bounty@39#"
    rabbitmq_user: "mynextapp"
    rabbitmq_password: "nextrabbit"

  tasks:
    - name: Install and configure RabbitMQ
      apt:
        name: rabbitmq-server
        state: present
        update_cache: yes

    - name: Enable RabbitMQ service
      service:
        name: rabbitmq-server
        state: started
        enabled: yes

    - name: Add RabbitMQ admin user
      rabbitmq_user:
        user: "{{ rabbitmq_user }}"
        password: "{{ rabbitmq_password }}"
        tags: admin
        state: present
    
    - name: Configure RabbitMQ vhost permissions
      rabbitmq_vhost:
        name: /
        user: "{{ rabbitmq_user }}"
        configure_priv: .*
        write_priv: .*
        read_priv: .*

  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
  
    
#    - name: Install Nginx
#      apt:
#        name: nginx=1.26.*
#        state: present
#
#    - name: Ensure Nginx configuration directory exists
#      file:
#        path: /etc/nginx/sites-available
#        state: directory
#        owner: root
#        group: root
#        mode: '0755'
#
#    - name: Configure Nginx to reverse proxy
#      copy:
#        dest: /etc/nginx/sites-available/default
#        content: |
#          server {
#              listen 80;
#              server_name ec2-54-158-143-47.compute-1.amazonaws.com;
#
#              location / {
#                  proxy_pass http://{{ app_host }}:{{ app_port }};
#                  proxy_set_header Host $host;
#                  proxy_set_header X-Real-IP $remote_addr;
#                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#                  proxy_set_header X-Forwarded-Proto $scheme;
#              }
#              error_log /var/log/stage_5b/error.log;
#              access_log /var/log/stage_5b/out.log;
#          }
#      notify: 
#        - Restart Nginx service
#        
#
#    - name: Ensure Nginx service is enabled and started
#      service:
#        name: nginx
#        state: started
#        enabled: yes
#
#    - name: Create stdout log file
#      file:
#        path: "{{ out_log }}"
#        state: touch
#        owner: "{{ hng_user }}"
#        group: "{{ hng_user }}"
#        mode: '0644'
#
#    - name: Create stderr log file
#      file:
#        path: "{{ error_log }}"
#        state: touch
#        owner: "{{ hng_user }}"
#        group: "{{ hng_user }}"
#        mode: '0644'
#
#    - name: Redirect stdout and stderr to log files
#      shell: |
#        exec > >(tee -a {{ out_log }} )
#        exec 2> >(tee -a {{ error_log }} >&2 )
#      args:
#        executable: /bin/bash
#      async: 0
#      poll: 0